version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  mysql:
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - mysql_data:/var/lib/mysql
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --server-id=184054 --log-bin=mysql-bin --binlog-format=ROW

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  consul:
    image: hashicorp/consul:latest
    command: agent -dev -client=0.0.0.0
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - ./config:/consul/config

  # qdrant:
  #   image: qdrant/qdrant:latest
  #   container_name: qdrant
  #   ports:
  #     - "6333:6333"
  #   volumes:
  #     - qdrant_data:/qdrant/storage
  #   environment:
  #     - QDRANT_LOG_LEVEL=info
  #   restart: always

  # jaeger:
  #   image: jaegertracing/all-in-one:latest
  #   ports:
  #     - "16686:16686" # UI
  #     - "14268:14268" # HTTP Thrift
  #     - "14250:14250" # gRPC
  #     - "6831:6831/udp" # UDP compact Thrift
  #     - "6832:6832/udp" # UDP binary Thrift
  #   environment:
  #     - COLLECTOR_ZIPKIN_HTTP_PORT=9411
  #     - JAEGER_SAMPLER_TYPE=const
  #     - JAEGER_SAMPLER_PARAM=1
  #     - JAEGER_AGENT_HOST=jaeger

  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=development
    command: ["./gateway"]

  user:
    build:
      context: ./user
      dockerfile: Dockerfile
    environment:
      - GO_ENV=development
    command: ["./user"]
    deploy:
      mode: replicated
      replicas: 1

  gateway-dev:
    build:
      context: ./gateway
      dockerfile: Dockerfile-dev
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=development
    command: ["go", "run", "./cmd/main/main.go"]
    volumes:
      - /usr/app:/Users/toanbanh/youtube-backend/gateway

  user-dev:
    build:
      context: ./user
      dockerfile: Dockerfile-dev
    environment:
      - GO_ENV=development
    command: ["go", "run", "./cmd/main/main.go"]
    deploy:
      mode: replicated
      replicas: 1
    volumes:
      - /usr/app:/Users/toanbanh/youtube-backend/user

  video:
    build:
      context: ./video
      dockerfile: Dockerfile
    environment:
      - GO_ENV=development
    command: ["./video"]

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.1
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=changeme
    volumes:
      - elastic_data:/usr/share/elasticsearch/data

  connect:
    image: debezium/connect:3.0.0.Final
    depends_on:
      - kafka
      - mysql
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - KEY_CONVERTER_SCHEMAS_ENABLE=false
      - VALUE_CONVERTER_SCHEMAS_ENABLE=false
    restart: always
volumes:
  mysql_data:
  qdrant_data:
    driver: local
  elastic_data:
    driver: local
